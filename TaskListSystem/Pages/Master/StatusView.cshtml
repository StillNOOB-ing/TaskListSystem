@page "/StatusView"
@model StatusViewModel
@{
	ViewData["Title"] = "Status";
}

<h2>Status</h2>

<p>
	<a asp-action="OnAddClick">New</a>
</p>
<table class="table">
	<thead>
		<tr>
			<th></th>
			<th>Name</th>
			<th>Description</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model.StatusList)
		{
			<tr>
				<td>
					<a href="#" class="edit-btn" data-mode="Edit" data-id="@item.UID" data-name="@item.Name" data-description="@item.Description">Edit</a>
					@* <a asp-page-handler="DeleteClick" asp-route-id="@item.UID">Delete</a> *@
				</td>
				<td>@item.Name</td>
				<td>@item.Description</td>
			</tr>
		}
	</tbody>
</table>

<div class="modal fade" id="statusModal" tabindex="-1" aria-labelledby="statusModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="statusModalLabel">Status</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="statusForm">
					<input type="hidden" id="statusMode" />
					<input type="hidden" id="statusID" />
					<div class="mb-3">
						<label for="statusName" class="form-label">Name</label>
						<input type="text" class="form-control" id="statusName" name="statusName" />
					</div>
					<div class="mb-3">
						<label for="statusDescription" class="form-label">Description</label>
						<textarea class="form-control" id="statusDescription" name="statusDescription"></textarea>
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-primary" id="btnSave">Save</button>
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>

<script type="text/javascript">

	document.addEventListener("DOMContentLoaded", function () {

		document.querySelectorAll(".edit-btn").forEach(button => {

			button.addEventListener("click", function () {

				let mode = this.getAttribute("data-mode");
				let uid = this.getAttribute("data-id");
				let name = this.getAttribute("data-name");
				let description = this.getAttribute("data-description");

				document.getElementById("statusModalLabel").innerText = mode;
				document.getElementById("statusMode").value = mode;
				document.getElementById("statusID").value = uid;
				document.getElementById("statusName").value = name;
				document.getElementById("statusDescription").value = description;

				let modal = new bootstrap.Modal(document.getElementById('statusModal'));
				modal.show();

			});

		});

		document.getElementById("btnSave").addEventListener("click", async function () {

			let mode = document.getElementById("statusMode").value;
			let uid = document.getElementById("statusID").value;
			let name = document.getElementById("statusName").value;
			let description = document.getElementById("statusDescription").value;

			console.log("Saving Status:", mode, uid, name, description);

			let statusData = {
				UID: uid,
				Name: name,
				Description: description
			};

			if (mode == "Edit")
			{
				try
				{
					let response = await fetch('/StatusView?handler=EditStatus', {
						method: 'POST',
						headers: {
							'Accept': 'application/json',
							'Content-Type': 'application/json'
						},
						body: JSON.stringify(statusData)
					})

					if (!response.ok) {
						throw new Error(`HTTP error! Status: ${response.status}`);
					}

					let result = text ? JSON.parse(text) : { success: false, message: "Empty response" };
					console.log("Response from server:", result);

					if (result.success) {
						alert("Status updated successfully!");
						location.reload(); // Refresh to reflect changes
					} else {
						alert("Error: " + result.message);
					}
				}
				catch (error)
				{
					console.error("Error saving status:", error);
					alert("An error occurred while saving the status.");
				}
			}			

			bootstrap.Modal.getInstance(document.getElementById('statusModal')).hide();

		});
	});

</script>